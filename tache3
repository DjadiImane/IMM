import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import griddata
import pandas as pd
import os

# Lire les données selon le type de fichier
def read_data(filename):
    ext = os.path.splitext(filename)[-1].lower()
    
    if ext == ".xlsx":  # Lecture d'un fichier Excel
        df = pd.read_excel(filename, sheet_name="Feuil1")
        angles = pd.to_numeric(df.iloc[:, 0], errors='coerce').dropna().values  # Conversion sécurisée en float
        data = df.iloc[:, 1:].apply(pd.to_numeric, errors='coerce').dropna().values  # Conversion des données
    
    elif ext == ".atn":  # Lecture d'un fichier texte
        with open(filename, 'r') as file:
            lines = file.readlines()
            angles = np.arange(0, len(lines) * 5, 5)  # Supposition : pas de 5°
            data = np.array([float(line.strip()) for line in lines if line.strip().replace('.', '', 1).isdigit()])
            data = data.reshape(-1, 1)  # Transformer en colonne unique si nécessaire
    
    else:
        raise ValueError("Format de fichier non pris en charge.")
    
    return angles, data

# Convertir les angles en radians
def convert_polar(angles, data):
    theta = np.radians(np.array(angles, dtype=float))  # Conversion explicite en float
    return theta, data

# Charger les fichiers
data_files = [
    r"C:\Users\IMANE\Desktop\projet\1743096060973_4 graphes mesures anécho pas de 5degrees.xlsx"
    
]

fig = plt.figure(figsize=(18, 6))

for idx, file_path in enumerate(data_files):
    angles, data = read_data(file_path)
    theta, data = convert_polar(angles, data)
    
    def plot_2d(ax, theta, radius, label):
        ax.set_theta_zero_location("N")
        ax.set_theta_direction(-1)
        ax.plot(theta, radius, linestyle='-', lw=1, label=label)
        ax.set_title(f"2D Polaire - {label}")
        ax.legend()
        ax.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)

    def plot_3d(ax, theta, radius, label):
        x = np.cos(theta) * radius
        y = np.sin(theta) * radius
        z = np.zeros_like(radius)
        ax.plot(x, y, z, linestyle='-', lw=1)
        ax.set_title(f"3D - {label}")
        ax.set_xlabel("X")
        ax.set_ylabel("Y")
        ax.set_zlabel("Amplitude")

    def plot_lissage(ax, theta, radius, label):
        x = np.cos(theta) * radius
        y = np.sin(theta) * radius
        z = radius
        grid_x, grid_y = np.meshgrid(np.linspace(min(x), max(x), 100), np.linspace(min(y), max(y), 100))
        grid_z = griddata((x, y), z, (grid_x, grid_y), method='cubic')
        surf = ax.plot_surface(grid_x, grid_y, grid_z, cmap='jet', edgecolor='none')
        ax.set_title(f"3D Lissé - {label}")
        ax.set_xlabel("X")
        ax.set_ylabel("Y")
        ax.set_zlabel("Amplitude")
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=10, label='dBi')

    # Création des subplots
    for i in range(data.shape[1]):
        ax2d = fig.add_subplot(3, 4, idx * 4 + i + 1, projection='polar')
        plot_2d(ax2d, theta, data[:, i], f"Fichier {idx+1} - Graphe {i+1}")

        ax3d = fig.add_subplot(3, 4, idx * 4 + i + 5, projection='3d')
        plot_3d(ax3d, theta, data[:, i], f"Fichier {idx+1} - Graphe {i+1}")

        axliss = fig.add_subplot(3, 4, idx * 4 + i + 9, projection='3d')
        plot_lissage(axliss, theta, data[:, i], f"Fichier {idx+1} - Graphe {i+1}")

plt.tight_layout()
plt.show()

